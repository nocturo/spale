name: build-packages

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch: {}

jobs:
  build:
    name: ${{ matrix.distro.name }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        distro:
          - { name: alma9,  container: 'almalinux:9' }
          - { name: alma10, container: 'almalinux:10' }
          - { name: debian12,  container: 'debian:12' }
          - { name: debian13,  container: 'debian:13' }
          - { name: ubuntu2404, container: 'ubuntu:24.04' }

    container:
      image: ${{ matrix.distro.container }}
      options: --privileged

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prepare build deps (RPM-based)
        if: contains(matrix.distro.name, 'alma')
        run: |
          # Derive version/release
          if [[ "${GITHUB_REF_TYPE}" == "tag" && "${GITHUB_REF_NAME}" =~ ^v([0-9]+(\.[0-9]+){1,2})$ ]]; then
            PKG_VERSION="${GITHUB_REF_NAME#v}"; PKG_RELEASE="1"
          else
            PKG_VERSION="$(date -u +%Y.%m.%d)-g${GITHUB_SHA::7}"; PKG_RELEASE="${GITHUB_RUN_NUMBER}"
          fi
          echo "PKG_VERSION=$PKG_VERSION" >> $GITHUB_ENV
          echo "PKG_RELEASE=$PKG_RELEASE" >> $GITHUB_ENV

          # Build spec with %changelog from CHANGELOG.md for this version
          CHANGE_DATE=$(date +"%a %b %d %Y")
          AUTHOR_NAME=${GIT_AUTHOR_NAME:-${GITHUB_ACTOR:-CI}}
          AUTHOR_EMAIL=${GIT_AUTHOR_EMAIL:-ci@users.noreply.github.com}
          CHANGE_BODY=$(awk -v ver="$PKG_VERSION" 'BEGIN{p=0} /^## \\[/ { if(p) exit } { if($0 ~ "^## \\[" ver "\\\\]" ) { p=1; next } } p { print }' CHANGELOG.md | sed -e 's/^[-*][[:space:]]\{1,\}/- /')
          if [ -z "$CHANGE_BODY" ]; then CHANGE_BODY="- Release $PKG_VERSION"; fi
          awk 'BEGIN{emit=1} { if($0 ~ /^%changelog/) emit=0; if(emit) print }' dist/rpm/spale.spec > dist/rpm/spale.spec.gen
          {
            echo "%changelog"
            echo "* ${CHANGE_DATE} ${AUTHOR_NAME} <${AUTHOR_EMAIL}> - ${PKG_VERSION}-${PKG_RELEASE}"
            echo "$CHANGE_BODY"
          } >> dist/rpm/spale.spec.gen
          dnf -y install 'dnf-command(config-manager)' || true
          dnf -y groupinstall 'Development Tools'
          dnf -y install make clang gcc bpftool openssl-devel elfutils-libelf-devel zlib-devel systemd-rpm-macros rpm-build git cmake zlib-devel pkgconfig
          dnf --enablerepo=crb -y install libbpf libbpf-devel
          mkdir -p /root/rpmbuild/{SOURCES,SRPMS,RPMS,BUILD,SPECS}
          rpmbuild -bb dist/rpm/spale.spec --build-in-place --define "_topdir /root/rpmbuild" --define "_sourcedir $(pwd)" --define "_rpmdir $(pwd)/artifacts/rpm" --define "version ${PKG_VERSION}" --define "release ${PKG_RELEASE}"

      - name: Prepare build deps (Debian/Ubuntu)
        if: "!contains(matrix.distro.name, 'alma')"
        run: |
          # Derive version
          if [[ "${GITHUB_REF_TYPE}" == "tag" && "${GITHUB_REF_NAME}" =~ ^v([0-9]+(\.[0-9]+){1,2})$ ]]; then
            PKG_VERSION="${GITHUB_REF_NAME#v}"
          else
            PKG_VERSION="$(date -u +%Y.%m.%d)-g${GITHUB_SHA::7}"
          fi
          echo "PKG_VERSION=$PKG_VERSION" >> $GITHUB_ENV
          export DEBIAN_FRONTEND=noninteractive
          apt-get update
          . /etc/os-release
          if [ "$ID" = "ubuntu" ]; then
            apt-get install -y --no-install-recommends build-essential clang make linux-tools-common linux-tools-generic libbpf-dev libelf-dev zlib1g-dev libssl-dev pkg-config debhelper devscripts git
            export BPFTOOL="/usr/lib/linux-tools*/bpftool"
          else
            apt-get install -y --no-install-recommends build-essential clang make bpftool libbpf-dev libelf-dev zlib1g-dev libssl-dev pkg-config debhelper devscripts git
          fi
          rm -rf debian && cp -a dist/debian debian
          export DEBFULLNAME="CI"; export DEBEMAIL="ci@users.noreply.github.com"
          if [ -f debian/changelog ]; then
            dch -v "${PKG_VERSION}-1" "Release ${PKG_VERSION}"
          else
            dch --create -v "${PKG_VERSION}-1" --package spale --distribution unstable "Release ${PKG_VERSION}"
          fi
          CHANGE_BODY=$(awk -v ver="$PKG_VERSION" 'BEGIN{p=0} /^## \\[\[/ { if(p) exit } { if($0 ~ "^## \\[/" ver "\\\\]" ) { p=1; next } } p { print }' CHANGELOG.md)
          if [ -z "$CHANGE_BODY" ]; then CHANGE_BODY="- Release $PKG_VERSION"; fi
          echo "$CHANGE_BODY" | while IFS= read -r line; do
            # Convert markdown bullets to Debian changelog bullets
            msg=$(echo "$line" | sed -e 's/^[-*][[:space:]]\{1,\}/* /')
            [ -n "$msg" ] && dch -a "$msg"
          done
          dch -r ""
          dpkg-buildpackage -b -us -uc
          mkdir -p artifacts/deb
          mv ../*.deb artifacts/deb/ || true

      - name: Collect final package files
        run: |
          set -e
          mkdir -p final
          if [ -d artifacts ]; then
            find artifacts -type f \( -name '*.rpm' -o -name '*.deb' \) ! -name '*dbgsym*' -exec cp -a {} final/ \;
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: packages-${{ matrix.distro.name }}
          path: final/*

      - name: Upload assets to GitHub Release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v2
        with:
          files: final/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}



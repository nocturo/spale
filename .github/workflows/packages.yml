name: Build distro packages

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch: {}

permissions:
  contents: write

jobs:
  build:
    name: ${{ matrix.distro.name }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        distro:
          - { name: alma9,  container: 'almalinux:9' }
          - { name: alma10, container: 'almalinux:10' }
          - { name: debian12,  container: 'debian:12' }
          - { name: debian13,  container: 'debian:13' }
          - { name: ubuntu2404, container: 'ubuntu:24.04' }

    container:
      image: ${{ matrix.distro.container }}
      options: --privileged

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install parse-changelog
        uses: taiki-e/install-action@parse-changelog

      - name: Prepare build deps (RPM-based)
        if: contains(matrix.distro.name, 'alma')
        run: |
          # Derive version/release
          if [ "${GITHUB_REF_TYPE}" = "tag" ] && echo "${GITHUB_REF_NAME}" | grep -Eq '^v[0-9]+(\.[0-9]+){1,2}$'; then
            PKG_VERSION="${GITHUB_REF_NAME#v}"; PKG_RELEASE="1"
          else
            PKG_VERSION="$(date -u +%Y.%m.%d)-g$(echo "${GITHUB_SHA}" | cut -c1-7)"; PKG_RELEASE="${GITHUB_RUN_NUMBER}"
          fi
          echo "PKG_VERSION=$PKG_VERSION" >> $GITHUB_ENV
          echo "PKG_RELEASE=$PKG_RELEASE" >> $GITHUB_ENV

          AUTHOR_NAME=${GIT_AUTHOR_NAME:-${GITHUB_ACTOR:-Package Automation}}
          AUTHOR_EMAIL=${GIT_AUTHOR_EMAIL:-ci@users.noreply.github.com}
          CURRENT_VER_NORM="${PKG_VERSION#v}"
          CHANGELOG_JSON=$(parse-changelog CHANGELOG.md --json || true)
          awk 'BEGIN{emit=1} { if($0 ~ /^%changelog/) emit=0; if(emit) print }' dist/rpm/spale.spec > dist/rpm/spale.spec.gen
          {
            echo "%changelog"
            if [ -z "$CHANGELOG_JSON" ] || ! echo "$CHANGELOG_JSON" | jq -e . >/dev/null 2>&1; then
              CHANGE_DATE=$(date +"%a %b %d %Y")
              echo "* ${CHANGE_DATE} ${AUTHOR_NAME} <${AUTHOR_EMAIL}> - ${PKG_VERSION}-${PKG_RELEASE}"
              echo "- Release ${PKG_VERSION}"
            else
              VERSIONS=$(echo "$CHANGELOG_JSON" | jq -r 'keys | sort_by(split(".")|map(tonumber)) | reverse | .[]')
              if ! echo "$VERSIONS" | grep -qx "$CURRENT_VER_NORM"; then
                CHANGE_DATE=$(date +"%a %b %d %Y")
                echo "* ${CHANGE_DATE} ${AUTHOR_NAME} <${AUTHOR_EMAIL}> - ${PKG_VERSION}-${PKG_RELEASE}"
                echo "- CI build ${PKG_VERSION}"
              fi
              for v in $VERSIONS; do
                title=$(echo "$CHANGELOG_JSON" | jq -r --arg v "$v" '.[$v].title')
                notes=$(echo "$CHANGELOG_JSON" | jq -r --arg v "$v" '.[$v].notes')
                datestr=$(printf "%s\n" "$title" | grep -Eo '[0-9]{4}-[0-9]{2}-[0-9]{2}' | head -n1)
                if [ -n "$datestr" ]; then change_date=$(date -d "$datestr" +"%a %b %d %Y"); else change_date=$(date +"%a %b %d %Y"); fi
                rel="1"; if [ "$v" = "$CURRENT_VER_NORM" ] && [ -n "$PKG_RELEASE" ]; then rel="$PKG_RELEASE"; fi
                echo "* ${change_date} ${AUTHOR_NAME} <${AUTHOR_EMAIL}> - ${v}-${rel}"
                printf "%s\n" "$notes" | while IFS= read -r line; do
                  [ -z "$line" ] && continue
                  echo "$line" | sed -e 's/^[-*][[:space:]]\{1,\}/- /'
                done
              done
            fi
          } >> dist/rpm/spale.spec.gen
          dnf -y install 'dnf-command(config-manager)' || true
          dnf -y groupinstall 'Development Tools'
          dnf -y install make clang gcc bpftool openssl-devel elfutils-libelf-devel zlib-devel systemd-rpm-macros rpm-build git cmake zlib-devel pkgconfig jq
          dnf --enablerepo=crb -y install libbpf libbpf-devel
          mkdir -p /root/rpmbuild/{SOURCES,SRPMS,RPMS,BUILD,SPECS}
          rpmbuild -bb dist/rpm/spale.spec.gen --build-in-place --define "_topdir /root/rpmbuild" --define "_sourcedir $(pwd)" --define "_rpmdir $(pwd)/artifacts/rpm" --define "version ${PKG_VERSION}" --define "release ${PKG_RELEASE}"

      - name: Prepare build deps (Debian/Ubuntu)
        if: "!contains(matrix.distro.name, 'alma')"
        run: |
          # Derive version
          if [ "${GITHUB_REF_TYPE}" = "tag" ] && echo "${GITHUB_REF_NAME}" | grep -Eq '^v[0-9]+(\.[0-9]+){1,2}$'; then
            PKG_VERSION="${GITHUB_REF_NAME#v}"
          else
            PKG_VERSION="$(date -u +%Y.%m.%d)-g$(echo "${GITHUB_SHA}" | cut -c1-7)"
          fi
          echo "PKG_VERSION=$PKG_VERSION" >> $GITHUB_ENV
          export DEBIAN_FRONTEND=noninteractive
          apt-get update
          . /etc/os-release
          if [ "$ID" = "ubuntu" ]; then
            apt-get install -y --no-install-recommends build-essential clang make linux-tools-common linux-tools-generic libbpf-dev libelf-dev zlib1g-dev libssl-dev pkg-config debhelper devscripts git jq
            export BPFTOOL="/usr/lib/linux-tools*/bpftool"
          else
            apt-get install -y --no-install-recommends build-essential clang make bpftool libbpf-dev libelf-dev zlib1g-dev libssl-dev pkg-config debhelper devscripts git jq
          fi
          # Debian 12: install clang-16 explicitly to ensure BPF memcmp is inlined
          if [ "$ID" = "debian" ] && [ "$VERSION_ID" = "12" ]; then
            apt-get install -y --no-install-recommends clang-16
          fi
          rm -rf debian && cp -a dist/debian debian
          export DEBFULLNAME="Package Automation"; export DEBEMAIL="ci@users.noreply.github.com"
          # Build complete debian/changelog from CHANGELOG.md JSON
          CHANGELOG_JSON=$(parse-changelog CHANGELOG.md --json || true)
          rm -f debian/changelog
          CURRENT_VER_NORM="${PKG_VERSION#v}"; CURRENT_VER_NORM="${CURRENT_VER_NORM%%-*}"; CURRENT_VER_NORM="${CURRENT_VER_NORM%%+*}"
          if [ -z "$CHANGELOG_JSON" ] || ! echo "$CHANGELOG_JSON" | jq -e . >/dev/null 2>&1; then
            dch --create -v "${PKG_VERSION}-1" --package spale --distribution unstable -u medium "CI build ${PKG_VERSION}"
            dch -r ""
          else
            VERSIONS=$(echo "$CHANGELOG_JSON" | jq -r 'keys | sort_by(split(".")|map(tonumber)) | reverse | .[]')
            first=1
            for v in $VERSIONS; do
              title=$(echo "$CHANGELOG_JSON" | jq -r --arg v "$v" '.[$v].title')
              notes=$(echo "$CHANGELOG_JSON" | jq -r --arg v "$v" '.[$v].notes')
              datestr=$(printf "%s\n" "$title" | grep -Eo '[0-9]{4}-[0-9]{2}-[0-9]{2}' | head -n1)
              if [ $first -eq 1 ]; then
                dch --create -v "${v}-1" --package spale --distribution unstable -u medium "Release ${v}"
                first=0
              else
                dch --newversion "${v}-1" --distribution unstable -u medium "Release ${v}"
              fi
              printf "%s\n" "$notes" | while IFS= read -r line; do
                msg=$(echo "$line" | sed -e 's/^[-*][[:space:]]\{1,\}/* /')
                [ -n "$msg" ] && dch -a "$msg"
              done
              if [ -n "$datestr" ]; then
                export DEBCHANGE_TIMESTAMP="$(date -d "$datestr" +%s)"
              else
                unset DEBCHANGE_TIMESTAMP
              fi
              dch -r ""
            done
            # Ensure a snapshot entry exists if building a non-tag version
            if ! echo "$VERSIONS" | head -n1 | grep -qx "$CURRENT_VER_NORM"; then
              dch --newversion "${PKG_VERSION}-1" --distribution unstable -u medium "CI build ${PKG_VERSION}"
              dch -r ""
            fi
          fi
          export CLANG="$(command -v clang-16 || command -v clang || echo clang)"
          dpkg-buildpackage -b -us -uc
          mkdir -p artifacts/deb
          for f in ../*.deb; do
            [ -e "$f" ] || continue
            base=$(basename "$f")
            mv "$f" "artifacts/deb/${{ matrix.distro.name }}-$base"
          done

      - name: Collect final package files
        run: |
          set -e
          mkdir -p final
          if [ -d artifacts ]; then
            find artifacts -type f \( -name '*.rpm' -o -name '*.deb' \) ! -name '*dbgsym*' -exec cp -a {} final/ \;
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: packages-${{ matrix.distro.name }}
          path: final/*

      - name: Upload assets to GitHub Release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v2
        with:
          files: final/*


